#!/usr/bin/php
<?
/**************************************************************************\
* Copyright 2013 Ryan Chan <ryan@rcchan.com>                               *
*                                                                          *
* This program is free software: you can redistribute it and/or modify     *
* it under the terms of the GNU Affero General Public License as           *
* published by the Free Software Foundation, either version 3 of the       *
* License, or (at your option) any later version.                          *
*                                                                          *
* This program is distributed in the hope that it will be useful,          *
* but WITHOUT ANY WARRANTY; without even the implied warranty of           *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
* GNU Affero General Public License for more details.                      *
*                                                                          *
* You should have received a copy of the GNU Affero General Public License *
* along with this program.  If not, see <http://www.gnu.org/licenses/>.    *
*                                                                          *
*                                                                          *
* Additional permission under the GNU Affero GPL version 3 section 7:      *
*                                                                          *
* If you modify this Program, or any covered work, by linking or           *
* combining it with other code, such other code is not for that reason     *
* alone subject to any of the requirements of the GNU Affero GPL           *
* version 3.                                                               *
\**************************************************************************/
?>

<?php

if ($argc != 3) die('Usage: ' . $argv[0] . "domain tab-separated-data-file\n");
$dom = $argv[1];
$file = fopen($argv[2], "r") or die ('could not open file');

$db = new PDO("mysql:host=localhost;dbname=zanhealth;","hceu","");
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
/*
$db->query('DROP TABLE IF EXISTS items');

$db->query('DROP TABLE IF EXISTS categories');
$db->query(
  'CREATE TABLE `categories` (
    `id` int(11) NOT NULL,
    `name` varchar(45) NOT NULL,
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8'
);

$db->query('DROP TABLE IF EXISTS facility');
$db->query(
  'CREATE TABLE `facility` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `name` varchar(45) NOT NULL,
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8'
);

$db->query('DROP TABLE IF EXISTS vendors');
$db->query(
  'CREATE TABLE `vendors` (
    `id` int(11) NOT NULL,
    `name` varchar(45) NOT NULL,
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8'
);

$db->query(
  'CREATE TABLE `items` (
    `id` int(3) unsigned zerofill NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    `manufacturer` varchar(45) DEFAULT NULL,
    `model` varchar(45) DEFAULT NULL,
    `serial_number` varchar(45) DEFAULT NULL,
    `year_manufactured` year(4) DEFAULT NULL,
    `funding` int(11) DEFAULT NULL,
    `vendor_id` int(11) DEFAULT NULL,
    `date_received` date DEFAULT NULL,
    `warranty_expiry` date DEFAULT NULL,
    `contract_expiry` date DEFAULT NULL,
    `warranty_notes` mediumtext,
    `service_agent` varchar(45) DEFAULT NULL,
    `facility_id` int(11) DEFAULT NULL,
    `floor` int(11) DEFAULT NULL,
    `room` varchar(45) DEFAULT NULL,
    `building` varchar(45) DEFAULT NULL,
    `status` enum(\'Fully Functional\',\'Not Functional\',\'Needs Major Repair\',\'Needs Minor Repair\') DEFAULT NULL,
    `utilization` enum(\'Normal\',\'No Utilization\',\'Very High\',\'Very Low\') DEFAULT NULL,
    `remarks` mediumtext,
    `type` enum(\'Biomedical\') DEFAULT NULL,
    `quantity` int(11) DEFAULT NULL,
    `category_id` int(11) DEFAULT NULL,
    `item_spec` varchar(45) DEFAULT NULL,
    `price` int(11) DEFAULT NULL,
    PRIMARY KEY (`id`),
    KEY `facility` (`facility_id`),
    KEY `vendor` (`vendor_id`),
    KEY `category` (`category_id`),
    CONSTRAINT `vendor` FOREIGN KEY (`vendor_id`) REFERENCES `vendors` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
    CONSTRAINT `category` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
    CONSTRAINT `facility` FOREIGN KEY (`facility_id`) REFERENCES `facility` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8'
);
*/

$facilities = array(); $category = array(); $vendor = array(); $data = array();

$stmt = $db->query('SELECT id, name FROM facility');
while($r = $stmt->fetch(PDO::FETCH_ASSOC)) $facilities[$r['name']] = $r['id'];

$stmt = $db->query('SELECT id, name FROM categories');
while($r = $stmt->fetch(PDO::FETCH_ASSOC)) $category[$r['name']] = $r['id'];

$stmt = $db->query('SELECT id, name FROM vendors');
while($r = $stmt->fetch(PDO::FETCH_ASSOC)) $vendors[$r['name']] = $r['id'];

$stmt = $db->prepare("REPLACE INTO items
  (tag,
  domain,
  name,
  manufacturer,
  model,
  serial_number,
  year_manufactured,
  funding,
  vendor_id,
  date_received,
  warranty_expiry,
  contract_expiry,
  warranty_notes,
  service_agent,
  facility_id,
  floor,
  room,
  building,
  status,
  utilization,
  remarks,
  type,
  quantity,
  category_id,
  item_spec,
  price)
  VALUES
  (
    :tag,
    :domain,
    :name,
    :manufacturer,
    :model,
    :serial,
    :year,
    :funding,
    :vendor,
    :received,
    :warranty,
    :contract,
    :warrantynotes,
    :agent,
    :facility,
    :floor,
    :room,
    :building,
    :status,
    :utilization,
    :remarks,
    :type,
    :qty,
    :category,
    :spec,
    :price
  );
");

while (!feof($file)){
  $line = fgets($file) ;
  if (preg_match('/^\s*$/', $line)) continue;
  $line = explode("\t", $line);
  if (count($line) < 25) print_r($line);
  $i = 0;
  $data[] = array(
    ':tag' => $line[$i++] ?: NULL,
    ':domain' => $dom,
    ':name' => $line[$i++] ?: NULL,
    ':manufacturer' => $line[$i++] ?: NULL,
    ':model' => $line[$i++] ?: NULL,
    ':serial' => $line[$i++] ?: NULL,
    ':year' => $line[$i++] ?: NULL,
    ':funding' => $line[$i++] ?: NULL,
    ':vendor' => $line[$i++] ? isset($vendor[$line[$i-1]]) ? $vendor[$line[$i-1]] : $vendor[$line[$i-1]] = count($vendor) + 1 : NULL,
    ':received' => $line[$i++] ?: NULL,
    ':warranty' => $line[$i++] ?: NULL,
    ':contract' => $line[$i++] ?: NULL,
    ':warrantynotes' => $line[$i++] ?: NULL,
    ':agent' => $line[$i++] ?: NULL,
    ':facility' => $line[$i++] ? isset($facilities[$line[$i-1]]) ? $facilities[$line[$i-1]] : $facilities[$line[$i-1]] = count($facilities) + 1: NULL,
    ':floor' => $line[$i++] ?: NULL,
    ':room' => $line[$i++] ?: NULL,
    ':building' => $line[$i++] ?: NULL,
    ':status' => $line[$i++] ?: NULL,
    ':utilization' => $line[$i++] ?: NULL,
    ':remarks' => $line[$i++] ?: NULL,
    ':type' => $line[$i++] ?: NULL,
    ':qty' => $line[$i++] ?: NULL,
    ':category' => $line[$i++] ? isset($category[$line[$i-1]]) ? $category[$line[$i-1]] : $category[$line[$i-1]] = count($category) + 1: NULL,
    ':spec' => $line[$i++] ?: NULL,
    ':price' => trim($line[$i++]) ?: NULL
  );
}

$db->beginTransaction();
$stmt_async = $db->prepare('INSERT INTO vendors (id, name) VALUES (:id, :name) ON DUPLICATE KEY UPDATE name = :name');
foreach ($vendor as $k => $v) $stmt_async->execute(array(':id' => $v, ':name' => $k));

$stmt_async = $db->prepare('INSERT INTO facility (id, name) VALUES (:id, :name) ON DUPLICATE KEY UPDATE name = :name');
foreach ($facilities as $k => $v) $stmt_async->execute(array(':id' => $v, ':name' => $k));

$stmt_async = $db->prepare('INSERT INTO categories (id, name) VALUES (:id, :name) ON DUPLICATE KEY UPDATE name = :name');
foreach ($category as $k => $v) $stmt_async->execute(array(':id' => $v, ':name' => $k));

foreach ($data as $d) $stmt->execute($d);

$db->commit();
fclose($file) ;

?>
